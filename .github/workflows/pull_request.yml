# ==========================================================================
# Copyright (C) 2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
# ==========================================================================

name: gcc/clang build and functional testing

on:
  pull_request:
    branches: [ develop ]

env:
  # (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Seed:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check if seed exists
      id: download_seed
      continue-on-error: true
      uses: actions/download-artifact@v3
      with:
        name: PR${{ github.event.pull_request.number }}_seed
        
    - name: Generate seed
      if: ${{ steps.download_seed.outcome != 'success' }}
      run: python -c 'from random import randrange; print(randrange(2**32))' > seed.txt
        
    - name: Upload seed
      if: ${{ steps.download_seed.outcome != 'success' }}
      uses: actions/upload-artifact@v3
      with:
        name: PR${{ github.event.pull_request.number }}_seed
        path: seed.txt

  ci:
    needs: Seed
  
    # Latest is >= 20.04 which has required GNU >= 8.2
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [ gcc, clang ]
      # If one job fails, the other can carry on
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # QPL requirement
    - name: Install nasm
      run: |
        sudo apt-get update -y
        sudo apt-get install -y nasm

    - name: Setup clang
      if: ${{ matrix.compiler == 'clang' }}
      id: setup_clang
      run: |
        sudo apt-get update -y
        sudo apt-get -y install clang-12
        echo "::set-output name=c_comp::clang"
        echo "::set-output name=cpp_comp::clang++"

    - name: Configure cmake
      env:
        CC: ${{steps.setup_clang.outputs.c_comp}}
        CXX: ${{steps.setup_clang.outputs.cpp_comp}}
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=installation

    - name: Build
      id: build
      run: cmake --build build --target install
        
    - name: Download seed
      id: download_seed
      uses: actions/download-artifact@v3
      with:
        name: PR${{ github.event.pull_request.number }}_seed
        
    - name: Obtain seed
      id: obtain_seed
      run: |
          seed=`cat seed.txt`
          echo "Seed $seed"
          echo "::set-output name=seed::$seed"
    
    - name: Functional tests (Algorithmic tests)
      if: ${{ always() && steps.build.outcome == 'success' && steps.obtain_seed.outcome == 'success' }}
      id: ta_tests
      timeout-minutes: 90
      run: ./installation/bin/tests --seed=${{ steps.obtain_seed.outputs.seed }} --gtest_filter=ta_*  --dataset=tools/testdata/

    - name: Functional tests (Bad argument tests)
      if: ${{ always() && steps.build.outcome == 'success' && steps.obtain_seed.outcome == 'success' }}
      id: tb_tests
      timeout-minutes: 90
      run: ./installation/bin/tests --seed=${{ steps.obtain_seed.outputs.seed }} --gtest_filter=tb_*  --dataset=tools/testdata/

    - name: Functional tests (Negative tests)
      if: ${{ always() && steps.build.outcome == 'success' && steps.obtain_seed.outcome == 'success' }}
      id: tn_tests
      timeout-minutes: 90
      run: ./installation/bin/tests --seed=${{ steps.obtain_seed.outputs.seed }} --gtest_filter=tn_*  --dataset=tools/testdata/

    - name: Functional tests (Thread tests)
      if: ${{ always() && steps.build.outcome == 'success' && steps.obtain_seed.outcome == 'success' }}
      id: tt_tests
      timeout-minutes: 90
      run: ./installation/bin/tests --seed=${{ steps.obtain_seed.outputs.seed }} --gtest_filter=tt_*  --dataset=tools/testdata/
